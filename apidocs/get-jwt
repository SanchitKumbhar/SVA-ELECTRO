🔐 GET /get-jwt-token/ – Get JWT Token (Use Before Any Fetch Request)
✅ Purpose

Use this API immediately after login (via Django session login) to obtain a JWT access and refresh token. These tokens are required to authorize future fetch or API requests to protected views in your frontend or JavaScript client.
📍 Endpoint

GET /get-jwt-token/
⚠️ Important

    🔐 This API must be called before any fetch request to secure APIs.

    It generates the access token needed for authenticated headers:

    Authorization: Bearer <access_token>

✅ Requirements

    The user must already be authenticated using Django session-based login (e.g., /accounts/login/).

    A valid session cookie (sessionid) must be present in the request.

📥 Request Example

GET /get-jwt/
Cookie: sessionid=<your_session_cookie>

You can also call it using fetch in JavaScript after login:

fetch('/get-jwt-token/', {
  method: 'GET',
  credentials: 'include'
})
.then(res => res.json())
.then(data => {
  localStorage.setItem('access_token', data.access);
  localStorage.setItem('refresh_token', data.refresh);
});

📤 Successful Response – 200 OK

{
  "access": "eyJhbGciOiJIUzI1NiIsInR...",
  "refresh": "eyJ0eXAiOiJKV1QiLCJh..."
}

❌ Unauthorized Response – 403 or 200 with message

{
  "message": "Invalid Data"
}

Occurs if the user is not logged in via Django session.
🛠 Backend Logic (Reference)

from django.http import JsonResponse
from rest_framework_simplejwt.tokens import RefreshToken

def get_jwt_token(request):
    user = request.user
    if user.is_authenticated:
        refresh = RefreshToken.for_user(user)
        return JsonResponse({
            'access': str(refresh.access_token),
            'refresh': str(refresh)
        })
    else:
        return JsonResponse({
            'message': "Invalid Data"
        })

📌 Usage in Headers for Protected API Calls

Authorization: Bearer <access_token>

In JavaScript:

fetch('/api/protected-endpoint/', {
  method: 'GET',
  headers: {
    'Authorization': 'Bearer ' + localStorage.getItem('access_token')
  }
});

